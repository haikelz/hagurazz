{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { FieldDefs, defineDocumentType, makeSource } from \"contentlayer/source-files\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings/lib\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport rehypeSlug from \"rehype-slug\";\nimport remarkGfm from \"remark-gfm\";\n\nconst highlighterOptions = {\n  /**\n   * Set theme from shiki\n   * @see https://github.com/shikijs/shiki/tree/main/packages/shiki/themes\n   */\n  theme: \"github-dark\",\n\n  onVisitLine(node: { children: { length: number } }) {\n    if (node.children.length === 0) node.children = [{ type: \"text\", value: \" \" }];\n  },\n\n  onVisitHighlightedLine(node: { properties: { className: Array<string> } }) {\n    node.properties.className.push(\"highlighted\");\n  },\n\n  onVisitHighlightedWord(node: any, id: string) {\n    if (id) {\n      const backgroundColor = {\n        v: \"rgb(0 103 163 / 56%)\",\n      }[id];\n\n      const color = {\n        v: \"rgb(175 255 255 / 100%)\",\n      }[id];\n\n      if (node.properties[\"data-rehype-pretty-code-wrapper\"]) {\n        node.children.forEach((childNode: { properties: { style: string } }) => {\n          childNode.properties.style = \"\";\n        });\n      }\n      node.properties.style = `background-color: ${backgroundColor}; color: ${color};`;\n    }\n    node.properties.className = [\"word\"];\n  },\n};\n\nconst notesFields: FieldDefs = {\n  author: {\n    type: \"string\",\n    description: \"Author's name of the note\",\n    required: true,\n  },\n  title: {\n    type: \"string\",\n    description: \"Title of the note\",\n    required: true,\n  },\n  tags: {\n    type: \"list\",\n    of: { type: \"string\" },\n    description: \"Tags of the note\",\n    required: true,\n  },\n  date: {\n    type: \"date\",\n    description: \"Date of the note\",\n    required: true,\n  },\n  description: {\n    type: \"string\",\n    description: \"Description of the note\",\n    required: true,\n  },\n};\n\nconst worksFields: FieldDefs = {\n  id: {\n    type: \"number\",\n    description: \"Id of the work\",\n    required: true,\n  },\n  author: {\n    type: \"string\",\n    description: \"Author of the work\",\n    required: true,\n  },\n  title: {\n    type: \"string\",\n    description: \"Title of the work\",\n    required: true,\n  },\n  stack: {\n    type: \"list\",\n    of: {\n      type: \"string\",\n    },\n    description: \"Stack of the work\",\n    required: true,\n  },\n  description: {\n    type: \"string\",\n    description: \"Description of the work\",\n    required: true,\n  },\n  preview: {\n    type: \"string\",\n    description: \"Preview of the work\",\n  },\n  repo: {\n    type: \"string\",\n    description: \"Repo of the work\",\n  },\n};\n\nconst Notes = defineDocumentType(() => ({\n  name: \"Notes\",\n  filePathPattern: `**/*.mdx`,\n  contentType: \"mdx\",\n  fields: notesFields,\n  computedFields: {\n    slug: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.flattenedPath,\n    },\n  },\n}));\n\nconst Works = defineDocumentType(() => ({\n  name: \"Works\",\n  filePathPattern: `**/*.mdx`,\n  contentType: \"mdx\",\n  fields: worksFields,\n  computedFields: {\n    slug: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.flattenedPath,\n    },\n  },\n}));\n\nexport default makeSource({\n  mdx: {\n    rehypePlugins: [\n      rehypeSlug,\n      [rehypeAutolinkHeadings, { behavior: \"wrap\" }],\n      [rehypePrettyCode, highlighterOptions],\n    ],\n    remarkPlugins: [remarkGfm],\n  },\n  contentDirPath: \"./src/contents\",\n  documentTypes: [Works],\n});\n"],
  "mappings": "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",
  "names": []
}
